
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00000ca0  00000d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001ce  008001ce  00000e02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036f8  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d79  00000000  00000000  000046cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017cd  00000000  00000000  00005445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00006c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000737  00000000  00000000  00006f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026d0  00000000  00000000  0000766b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00009d3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3c       	cpi	r26, 0xCE	; 206
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae ec       	ldi	r26, 0xCE	; 206
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3d       	cpi	r26, 0xD8	; 216
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 25 04 	call	0x84a	; 0x84a <main>
  9e:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <nacitajklavesy>:
};

volatile uint8_t tempklaves;

uint8_t nacitajklavesy(){
	KLDDR = 0xF0;
  a6:	90 ef       	ldi	r25, 0xF0	; 240
  a8:	9a b9       	out	0x0a, r25	; 10
	KLPORT = 0x0F;
  aa:	2f e0       	ldi	r18, 0x0F	; 15
  ac:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	e3 ec       	ldi	r30, 0xC3	; 195
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <nacitajklavesy+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <nacitajklavesy+0x12>
  b8:	00 00       	nop
	_delay_ms(10);
	tempklaves = KLPIN & 0x0F;
  ba:	89 b1       	in	r24, 0x09	; 9
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
	KLDDR = 0x0F;
  c2:	2a b9       	out	0x0a, r18	; 10
	KLPORT = 0xF0;
  c4:	9b b9       	out	0x0b, r25	; 11
  c6:	83 ec       	ldi	r24, 0xC3	; 195
  c8:	99 e0       	ldi	r25, 0x09	; 9
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <nacitajklavesy+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <nacitajklavesy+0x2a>
  d0:	00 00       	nop
	_delay_ms(10);
	tempklaves |= (KLPIN & 0xF0);
  d2:	89 b1       	in	r24, 0x09	; 9
  d4:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <__data_end>
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	89 2b       	or	r24, r25
  dc:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
	KLPORT = 0;
  e0:	1b b8       	out	0x0b, r1	; 11
	KLDDR = 0;
  e2:	1a b8       	out	0x0a, r1	; 10
  e4:	e3 ec       	ldi	r30, 0xC3	; 195
  e6:	f9 e0       	ldi	r31, 0x09	; 9
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <nacitajklavesy+0x42>
  ec:	00 c0       	rjmp	.+0      	; 0xee <nacitajklavesy+0x48>
  ee:	00 00       	nop
	_delay_ms(10);
	return tempklaves;
  f0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
}
  f4:	08 95       	ret

000000f6 <drzanieklavesy>:

uint8_t drzanieklavesy(){
  f6:	cf 93       	push	r28
	uint8_t drzklvtmp = nacitajklavesy();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <nacitajklavesy>
  fc:	c8 2f       	mov	r28, r24
	while(drzklvtmp == nacitajklavesy()){}
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <nacitajklavesy>
 102:	c8 17       	cp	r28, r24
 104:	e1 f3       	breq	.-8      	; 0xfe <drzanieklavesy+0x8>
	return drzklvtmp;
}
 106:	8c 2f       	mov	r24, r28
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <zistiklaves>:

char zistiklaves(uint8_t tmpkl){
	uint8_t prkl,drkl,rdk,stp;
	rdk = 9;stp = 9;
	prkl = tmpkl & 0xF0;
	prkl >>= 4;
 10c:	98 2f       	mov	r25, r24
 10e:	92 95       	swap	r25
 110:	9f 70       	andi	r25, 0x0F	; 15
	drkl = tmpkl & 0x0F;
 112:	8f 70       	andi	r24, 0x0F	; 15
	if(prkl==0x07){rdk=0;}
 114:	97 30       	cpi	r25, 0x07	; 7
 116:	41 f0       	breq	.+16     	; 0x128 <zistiklaves+0x1c>
	else if (prkl==0x0B){rdk=1;}
 118:	9b 30       	cpi	r25, 0x0B	; 11
 11a:	41 f0       	breq	.+16     	; 0x12c <zistiklaves+0x20>
	else if (prkl==0x0D){rdk=2;}
 11c:	9d 30       	cpi	r25, 0x0D	; 13
 11e:	41 f0       	breq	.+16     	; 0x130 <zistiklaves+0x24>
	else if (prkl==0x0E){rdk=3;}
 120:	9e 30       	cpi	r25, 0x0E	; 14
 122:	41 f0       	breq	.+16     	; 0x134 <zistiklaves+0x28>
	return drzklvtmp;
}

char zistiklaves(uint8_t tmpkl){
	uint8_t prkl,drkl,rdk,stp;
	rdk = 9;stp = 9;
 124:	e9 e0       	ldi	r30, 0x09	; 9
 126:	07 c0       	rjmp	.+14     	; 0x136 <zistiklaves+0x2a>
	prkl = tmpkl & 0xF0;
	prkl >>= 4;
	drkl = tmpkl & 0x0F;
	if(prkl==0x07){rdk=0;}
 128:	e0 e0       	ldi	r30, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <zistiklaves+0x2a>
	else if (prkl==0x0B){rdk=1;}
 12c:	e1 e0       	ldi	r30, 0x01	; 1
 12e:	03 c0       	rjmp	.+6      	; 0x136 <zistiklaves+0x2a>
	else if (prkl==0x0D){rdk=2;}
 130:	e2 e0       	ldi	r30, 0x02	; 2
 132:	01 c0       	rjmp	.+2      	; 0x136 <zistiklaves+0x2a>
	else if (prkl==0x0E){rdk=3;}
 134:	e3 e0       	ldi	r30, 0x03	; 3
	if(drkl==0x07){stp=0;}
 136:	87 30       	cpi	r24, 0x07	; 7
 138:	41 f0       	breq	.+16     	; 0x14a <zistiklaves+0x3e>
	else if (drkl==0x0B){stp=1;}
 13a:	8b 30       	cpi	r24, 0x0B	; 11
 13c:	41 f0       	breq	.+16     	; 0x14e <zistiklaves+0x42>
	else if (drkl==0x0D){stp=2;}
 13e:	8d 30       	cpi	r24, 0x0D	; 13
 140:	41 f0       	breq	.+16     	; 0x152 <zistiklaves+0x46>
	else if (drkl==0x0E){stp=3;}
 142:	8e 30       	cpi	r24, 0x0E	; 14
 144:	41 f0       	breq	.+16     	; 0x156 <zistiklaves+0x4a>
	return drzklvtmp;
}

char zistiklaves(uint8_t tmpkl){
	uint8_t prkl,drkl,rdk,stp;
	rdk = 9;stp = 9;
 146:	89 e0       	ldi	r24, 0x09	; 9
 148:	07 c0       	rjmp	.+14     	; 0x158 <zistiklaves+0x4c>
	drkl = tmpkl & 0x0F;
	if(prkl==0x07){rdk=0;}
	else if (prkl==0x0B){rdk=1;}
	else if (prkl==0x0D){rdk=2;}
	else if (prkl==0x0E){rdk=3;}
	if(drkl==0x07){stp=0;}
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	05 c0       	rjmp	.+10     	; 0x158 <zistiklaves+0x4c>
	else if (drkl==0x0B){stp=1;}
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	03 c0       	rjmp	.+6      	; 0x158 <zistiklaves+0x4c>
	else if (drkl==0x0D){stp=2;}
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	01 c0       	rjmp	.+2      	; 0x158 <zistiklaves+0x4c>
	else if (drkl==0x0E){stp=3;}
 156:	83 e0       	ldi	r24, 0x03	; 3
	if(rdk != 9 && stp != 9){return klaves[rdk][stp];}else{return 0xFF;}
 158:	e9 30       	cpi	r30, 0x09	; 9
 15a:	69 f0       	breq	.+26     	; 0x176 <zistiklaves+0x6a>
 15c:	89 30       	cpi	r24, 0x09	; 9
 15e:	69 f0       	breq	.+26     	; 0x17a <zistiklaves+0x6e>
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	e0 50       	subi	r30, 0x00	; 0
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	e8 0f       	add	r30, r24
 170:	f1 1d       	adc	r31, r1
 172:	80 81       	ld	r24, Z
 174:	08 95       	ret
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	08 95       	ret
 17a:	8f ef       	ldi	r24, 0xFF	; 255

}
 17c:	08 95       	ret

0000017e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	88 60       	ori	r24, 0x08	; 8
 182:	85 b9       	out	0x05, r24	; 5
 184:	00 00       	nop
 186:	85 b1       	in	r24, 0x05	; 5
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	08 95       	ret

0000018e <lcd_write>:
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	d8 2f       	mov	r29, r24
 194:	66 23       	and	r22, r22
 196:	21 f0       	breq	.+8      	; 0x1a0 <lcd_write+0x12>
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <lcd_write+0x18>
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	8f 7d       	andi	r24, 0xDF	; 223
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	8f 7e       	andi	r24, 0xEF	; 239
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	87 b1       	in	r24, 0x07	; 7
 1ae:	8f 60       	ori	r24, 0x0F	; 15
 1b0:	87 b9       	out	0x07, r24	; 7
 1b2:	c8 b1       	in	r28, 0x08	; 8
 1b4:	c0 7f       	andi	r28, 0xF0	; 240
 1b6:	8d 2f       	mov	r24, r29
 1b8:	82 95       	swap	r24
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	8c 2b       	or	r24, r28
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	0e 94 bf 00 	call	0x17e	; 0x17e <toggle_e>
 1c4:	df 70       	andi	r29, 0x0F	; 15
 1c6:	dc 2b       	or	r29, r28
 1c8:	d8 b9       	out	0x08, r29	; 8
 1ca:	0e 94 bf 00 	call	0x17e	; 0x17e <toggle_e>
 1ce:	cf 60       	ori	r28, 0x0F	; 15
 1d0:	c8 b9       	out	0x08, r28	; 8
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <lcd_read>:
 1d8:	88 23       	and	r24, r24
 1da:	21 f0       	breq	.+8      	; 0x1e4 <lcd_read+0xc>
 1dc:	85 b1       	in	r24, 0x05	; 5
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	85 b9       	out	0x05, r24	; 5
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <lcd_read+0x12>
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	85 b9       	out	0x05, r24	; 5
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	80 61       	ori	r24, 0x10	; 16
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	87 b9       	out	0x07, r24	; 7
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	00 00       	nop
 1fe:	96 b1       	in	r25, 0x06	; 6
 200:	92 95       	swap	r25
 202:	90 7f       	andi	r25, 0xF0	; 240
 204:	85 b1       	in	r24, 0x05	; 5
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	85 b9       	out	0x05, r24	; 5
 20a:	00 00       	nop
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	85 b9       	out	0x05, r24	; 5
 212:	00 00       	nop
 214:	86 b1       	in	r24, 0x06	; 6
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	25 b1       	in	r18, 0x05	; 5
 21a:	27 7f       	andi	r18, 0xF7	; 247
 21c:	25 b9       	out	0x05, r18	; 5
 21e:	89 2b       	or	r24, r25
 220:	08 95       	ret

00000222 <lcd_waitbusy>:
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_read>
 228:	88 23       	and	r24, r24
 22a:	dc f3       	brlt	.-10     	; 0x222 <lcd_waitbusy>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_waitbusy+0xc>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_waitbusy+0xe>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_read>
 236:	08 95       	ret

00000238 <lcd_command>:
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
 23c:	0e 94 11 01 	call	0x222	; 0x222 <lcd_waitbusy>
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	8c 2f       	mov	r24, r28
 244:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_write>
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <lcd_clrscr>:
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_command>
 252:	08 95       	ret

00000254 <lcd_putc>:
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
 258:	0e 94 11 01 	call	0x222	; 0x222 <lcd_waitbusy>
 25c:	ca 30       	cpi	r28, 0x0A	; 10
 25e:	49 f4       	brne	.+18     	; 0x272 <lcd_putc+0x1e>
 260:	80 34       	cpi	r24, 0x40	; 64
 262:	10 f4       	brcc	.+4      	; 0x268 <lcd_putc+0x14>
 264:	80 e4       	ldi	r24, 0x40	; 64
 266:	01 c0       	rjmp	.+2      	; 0x26a <lcd_putc+0x16>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	80 58       	subi	r24, 0x80	; 128
 26c:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_command>
 270:	04 c0       	rjmp	.+8      	; 0x27a <lcd_putc+0x26>
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_write>
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <lcd_puts>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	fc 01       	movw	r30, r24
 284:	03 c0       	rjmp	.+6      	; 0x28c <lcd_puts+0xe>
 286:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_putc>
 28a:	fe 01       	movw	r30, r28
 28c:	ef 01       	movw	r28, r30
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	80 81       	ld	r24, Z
 292:	81 11       	cpse	r24, r1
 294:	f8 cf       	rjmp	.-16     	; 0x286 <lcd_puts+0x8>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 2a0:	87 b1       	in	r24, 0x07	; 7
 2a2:	8f 60       	ori	r24, 0x0F	; 15
 2a4:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2a6:	84 b1       	in	r24, 0x04	; 4
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2ac:	87 b1       	in	r24, 0x07	; 7
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2b2:	84 b1       	in	r24, 0x04	; 4
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_init+0x20>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_init+0x26>
 2c2:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 2c4:	88 b1       	in	r24, 0x08	; 8
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	88 b9       	out	0x08, r24	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 2ca:	88 b1       	in	r24, 0x08	; 8
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	88 b9       	out	0x08, r24	; 8
    lcd_e_toggle();
 2d0:	0e 94 bf 00 	call	0x17e	; 0x17e <toggle_e>
 2d4:	81 ee       	ldi	r24, 0xE1	; 225
 2d6:	94 e0       	ldi	r25, 0x04	; 4
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_init+0x3c>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <lcd_init+0x42>
 2de:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2e0:	0e 94 bf 00 	call	0x17e	; 0x17e <toggle_e>
 2e4:	95 e1       	ldi	r25, 0x15	; 21
 2e6:	9a 95       	dec	r25
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_init+0x4a>
 2ea:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2ec:	0e 94 bf 00 	call	0x17e	; 0x17e <toggle_e>
 2f0:	85 e1       	ldi	r24, 0x15	; 21
 2f2:	8a 95       	dec	r24
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <lcd_init+0x56>
 2f6:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2f8:	88 b1       	in	r24, 0x08	; 8
 2fa:	8e 7f       	andi	r24, 0xFE	; 254
 2fc:	88 b9       	out	0x08, r24	; 8
    lcd_e_toggle();
 2fe:	0e 94 bf 00 	call	0x17e	; 0x17e <toggle_e>
 302:	95 e1       	ldi	r25, 0x15	; 21
 304:	9a 95       	dec	r25
 306:	f1 f7       	brne	.-4      	; 0x304 <lcd_init+0x68>
 308:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 30a:	88 e2       	ldi	r24, 0x28	; 40
 30c:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 316:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 320:	8c 2f       	mov	r24, r28
 322:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_command>

}/* lcd_init */
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <customTime>:
		}
	}
}


void customTime() {
 32a:	ef 92       	push	r14
 32c:	ff 92       	push	r15
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	61 97       	sbiw	r28, 0x11	; 17
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
	lcd_puts("enter minutes\n");
 346:	8a e1       	ldi	r24, 0x1A	; 26
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	lcd_puts("(00-99) #enter");
 34e:	89 e2       	ldi	r24, 0x29	; 41
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	
	char customTime[8];
	int customMinute[2];
	int customSecond[2];
	int k = 0;
 356:	e1 2c       	mov	r14, r1
 358:	f1 2c       	mov	r15, r1
	
	for(;;) {
		lcd_command(0x0f);
 35a:	8f e0       	ldi	r24, 0x0F	; 15
 35c:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_command>
		uint8_t tmp = drzanieklavesy();
 360:	0e 94 7b 00 	call	0xf6	; 0xf6 <drzanieklavesy>
		char charPressed = zistiklaves(tmp);
 364:	0e 94 86 00 	call	0x10c	; 0x10c <zistiklaves>
 368:	89 8b       	std	Y+17, r24	; 0x11
		
		if (isdigit(charPressed)) {
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	20 53       	subi	r18, 0x30	; 48
 370:	31 09       	sbc	r19, r1
 372:	2a 30       	cpi	r18, 0x0A	; 10
 374:	31 05       	cpc	r19, r1
 376:	90 f5       	brcc	.+100    	; 0x3dc <customTime+0xb2>
			lcd_clrscr();
 378:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
			customTime[k] = charPressed;
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ec 0f       	add	r30, r28
 382:	fd 1f       	adc	r31, r29
 384:	ee 0d       	add	r30, r14
 386:	ff 1d       	adc	r31, r15
 388:	89 89       	ldd	r24, Y+17	; 0x11
 38a:	80 83       	st	Z, r24
			customTime[++k] = 0;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	e8 1a       	sub	r14, r24
 390:	f8 0a       	sbc	r15, r24
 392:	e1 e0       	ldi	r30, 0x01	; 1
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ec 0f       	add	r30, r28
 398:	fd 1f       	adc	r31, r29
 39a:	ee 0d       	add	r30, r14
 39c:	ff 1d       	adc	r31, r15
 39e:	10 82       	st	Z, r1
			lcd_puts(customTime);
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
			
			customMinute[k%2] = atoi(&charPressed);
 3a8:	87 01       	movw	r16, r14
 3aa:	01 70       	andi	r16, 0x01	; 1
 3ac:	10 78       	andi	r17, 0x80	; 128
 3ae:	11 23       	and	r17, r17
 3b0:	34 f4       	brge	.+12     	; 0x3be <customTime+0x94>
 3b2:	01 50       	subi	r16, 0x01	; 1
 3b4:	11 09       	sbc	r17, r1
 3b6:	0e 6f       	ori	r16, 0xFE	; 254
 3b8:	1f 6f       	ori	r17, 0xFF	; 255
 3ba:	0f 5f       	subi	r16, 0xFF	; 255
 3bc:	1f 4f       	sbci	r17, 0xFF	; 255
 3be:	ce 01       	movw	r24, r28
 3c0:	41 96       	adiw	r24, 0x11	; 17
 3c2:	0e 94 10 06 	call	0xc20	; 0xc20 <atoi>
 3c6:	00 0f       	add	r16, r16
 3c8:	11 1f       	adc	r17, r17
 3ca:	e1 e0       	ldi	r30, 0x01	; 1
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ec 0f       	add	r30, r28
 3d0:	fd 1f       	adc	r31, r29
 3d2:	e0 0f       	add	r30, r16
 3d4:	f1 1f       	adc	r31, r17
 3d6:	91 87       	std	Z+9, r25	; 0x09
 3d8:	80 87       	std	Z+8, r24	; 0x08
 3da:	bf cf       	rjmp	.-130    	; 0x35a <customTime+0x30>
		}
		else if (charPressed == '#') {
 3dc:	83 32       	cpi	r24, 0x23	; 35
 3de:	09 f0       	breq	.+2      	; 0x3e2 <customTime+0xb8>
 3e0:	bc cf       	rjmp	.-136    	; 0x35a <customTime+0x30>
			lcd_clrscr();
 3e2:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
		}
		
	}
	
	k=0;
	lcd_clrscr();
 3e6:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
	lcd_puts("enter seconds\n");
 3ea:	88 e3       	ldi	r24, 0x38	; 56
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	lcd_puts("(00-59) #enter");
 3f2:	87 e4       	ldi	r24, 0x47	; 71
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
			break;	
		}
		
	}
	
	k=0;
 3fa:	e1 2c       	mov	r14, r1
 3fc:	f1 2c       	mov	r15, r1
	lcd_clrscr();
	lcd_puts("enter seconds\n");
	lcd_puts("(00-59) #enter");

	for(;;) {
		lcd_command(0x0f);
 3fe:	8f e0       	ldi	r24, 0x0F	; 15
 400:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_command>
		uint8_t tmp = drzanieklavesy();
 404:	0e 94 7b 00 	call	0xf6	; 0xf6 <drzanieklavesy>
		char charPressed = zistiklaves(tmp);
 408:	0e 94 86 00 	call	0x10c	; 0x10c <zistiklaves>
 40c:	89 8b       	std	Y+17, r24	; 0x11
		
		if (isdigit(charPressed)) {
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	20 53       	subi	r18, 0x30	; 48
 414:	31 09       	sbc	r19, r1
 416:	2a 30       	cpi	r18, 0x0A	; 10
 418:	31 05       	cpc	r19, r1
 41a:	90 f5       	brcc	.+100    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			lcd_clrscr();
 41c:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
			customTime[k] = charPressed;
 420:	e1 e0       	ldi	r30, 0x01	; 1
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	ec 0f       	add	r30, r28
 426:	fd 1f       	adc	r31, r29
 428:	ee 0d       	add	r30, r14
 42a:	ff 1d       	adc	r31, r15
 42c:	89 89       	ldd	r24, Y+17	; 0x11
 42e:	80 83       	st	Z, r24
			customTime[++k] = 0;
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	e8 1a       	sub	r14, r24
 434:	f8 0a       	sbc	r15, r24
 436:	e1 e0       	ldi	r30, 0x01	; 1
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	ec 0f       	add	r30, r28
 43c:	fd 1f       	adc	r31, r29
 43e:	ee 0d       	add	r30, r14
 440:	ff 1d       	adc	r31, r15
 442:	10 82       	st	Z, r1
			lcd_puts(customTime);
 444:	ce 01       	movw	r24, r28
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
			
			customSecond[k%2] = atoi(&charPressed);
 44c:	87 01       	movw	r16, r14
 44e:	01 70       	andi	r16, 0x01	; 1
 450:	10 78       	andi	r17, 0x80	; 128
 452:	11 23       	and	r17, r17
 454:	34 f4       	brge	.+12     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 456:	01 50       	subi	r16, 0x01	; 1
 458:	11 09       	sbc	r17, r1
 45a:	0e 6f       	ori	r16, 0xFE	; 254
 45c:	1f 6f       	ori	r17, 0xFF	; 255
 45e:	0f 5f       	subi	r16, 0xFF	; 255
 460:	1f 4f       	sbci	r17, 0xFF	; 255
 462:	ce 01       	movw	r24, r28
 464:	41 96       	adiw	r24, 0x11	; 17
 466:	0e 94 10 06 	call	0xc20	; 0xc20 <atoi>
 46a:	00 0f       	add	r16, r16
 46c:	11 1f       	adc	r17, r17
 46e:	e1 e0       	ldi	r30, 0x01	; 1
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	ec 0f       	add	r30, r28
 474:	fd 1f       	adc	r31, r29
 476:	e0 0f       	add	r30, r16
 478:	f1 1f       	adc	r31, r17
 47a:	95 87       	std	Z+13, r25	; 0x0d
 47c:	84 87       	std	Z+12, r24	; 0x0c
 47e:	05 c0       	rjmp	.+10     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		}
		else if (charPressed == '#') {
 480:	83 32       	cpi	r24, 0x23	; 35
 482:	19 f4       	brne	.+6      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			lcd_clrscr();
 484:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
		startingTimeMinDigit2 = customMinute[1];
		startingTimeSecDigit1 = customSecond[0];
		startingTimeSecDigit2 = customSecond[1];
	}
	
}
 488:	19 c0       	rjmp	.+50     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
		else if (charPressed == '#') {
			lcd_clrscr();
			break;
		}
		
		startingTimeMinDigit1 = customMinute[0];
 48a:	89 85       	ldd	r24, Y+9	; 0x09
 48c:	9a 85       	ldd	r25, Y+10	; 0x0a
 48e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <startingTimeMinDigit1+0x1>
 492:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <startingTimeMinDigit1>
		startingTimeMinDigit2 = customMinute[1];
 496:	8b 85       	ldd	r24, Y+11	; 0x0b
 498:	9c 85       	ldd	r25, Y+12	; 0x0c
 49a:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <startingTimeMinDigit2+0x1>
 49e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <startingTimeMinDigit2>
		startingTimeSecDigit1 = customSecond[0];
 4a2:	8d 85       	ldd	r24, Y+13	; 0x0d
 4a4:	9e 85       	ldd	r25, Y+14	; 0x0e
 4a6:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <startingTimeSecDigit1+0x1>
 4aa:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <startingTimeSecDigit1>
		startingTimeSecDigit2 = customSecond[1];
 4ae:	8f 85       	ldd	r24, Y+15	; 0x0f
 4b0:	98 89       	ldd	r25, Y+16	; 0x10
 4b2:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <startingTimeSecDigit2+0x1>
 4b6:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <startingTimeSecDigit2>
	}
 4ba:	a1 cf       	rjmp	.-190    	; 0x3fe <customTime+0xd4>
	
}
 4bc:	61 96       	adiw	r28, 0x11	; 17
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	08 95       	ret

000004d6 <player1turn>:
	lcd_puts("player1's turn\n");
	player1turn();
	return;
}

void player1turn() {
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	28 97       	sbiw	r28, 0x08	; 8
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	f8 94       	cli
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	cd bf       	out	0x3d, r28	; 61
	while(startingTimeMinDigit1 != 0 || startingTimeMinDigit2 != 0 || startingTimeSecDigit1 != 0 || startingTimeSecDigit2 != 0) {
 4ea:	68 c0       	rjmp	.+208    	; 0x5bc <player1turn+0xe6>
		TM1637_setSegments((uint8_t[]) { ledNumbers[startingTimeMinDigit2], ledNumbers[startingTimeMinDigit1], ledNumbers[startingTimeSecDigit2], ledNumbers[startingTimeSecDigit1] }, 4, 0);
 4ec:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <startingTimeMinDigit2>
 4f0:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <startingTimeMinDigit2+0x1>
 4f4:	e0 5f       	subi	r30, 0xF0	; 240
 4f6:	fe 4f       	sbci	r31, 0xFE	; 254
 4f8:	20 81       	ld	r18, Z
 4fa:	2d 83       	std	Y+5, r18	; 0x05
 4fc:	fc 01       	movw	r30, r24
 4fe:	e0 5f       	subi	r30, 0xF0	; 240
 500:	fe 4f       	sbci	r31, 0xFE	; 254
 502:	80 81       	ld	r24, Z
 504:	8e 83       	std	Y+6, r24	; 0x06
 506:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <startingTimeSecDigit2>
 50a:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <startingTimeSecDigit2+0x1>
 50e:	e0 5f       	subi	r30, 0xF0	; 240
 510:	fe 4f       	sbci	r31, 0xFE	; 254
 512:	80 81       	ld	r24, Z
 514:	8f 83       	std	Y+7, r24	; 0x07
 516:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <startingTimeSecDigit1>
 51a:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <startingTimeSecDigit1+0x1>
 51e:	e0 5f       	subi	r30, 0xF0	; 240
 520:	fe 4f       	sbci	r31, 0xFE	; 254
 522:	80 81       	ld	r24, Z
 524:	88 87       	std	Y+8, r24	; 0x08
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	64 e0       	ldi	r22, 0x04	; 4
 52a:	ce 01       	movw	r24, r28
 52c:	05 96       	adiw	r24, 0x05	; 5
 52e:	0e 94 69 05 	call	0xad2	; 0xad2 <TM1637_setSegments>
			
		startingTimeSecDigit1--;
 532:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <startingTimeSecDigit1>
 536:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <startingTimeSecDigit1+0x1>
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <startingTimeSecDigit1+0x1>
 540:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <startingTimeSecDigit1>
		if (startingTimeSecDigit1 == -1){
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	89 f5       	brne	.+98     	; 0x5aa <player1turn+0xd4>
			startingTimeSecDigit1 = 9;
 548:	89 e0       	ldi	r24, 0x09	; 9
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <startingTimeSecDigit1+0x1>
 550:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <startingTimeSecDigit1>
			startingTimeSecDigit2--;
 554:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <startingTimeSecDigit2>
 558:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <startingTimeSecDigit2+0x1>
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <startingTimeSecDigit2+0x1>
 562:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <startingTimeSecDigit2>
			if (startingTimeSecDigit2 == -1){
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	01 f5       	brne	.+64     	; 0x5aa <player1turn+0xd4>
				startingTimeSecDigit2 = 5;
 56a:	85 e0       	ldi	r24, 0x05	; 5
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <startingTimeSecDigit2+0x1>
 572:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <startingTimeSecDigit2>
				startingTimeMinDigit1--;
 576:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <startingTimeMinDigit1>
 57a:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <startingTimeMinDigit1+0x1>
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <startingTimeMinDigit1+0x1>
 584:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <startingTimeMinDigit1>
				if (startingTimeMinDigit1 == -1){
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	79 f4       	brne	.+30     	; 0x5aa <player1turn+0xd4>
					startingTimeMinDigit1 = 9;
 58c:	89 e0       	ldi	r24, 0x09	; 9
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <startingTimeMinDigit1+0x1>
 594:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <startingTimeMinDigit1>
					startingTimeMinDigit2--;
 598:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <startingTimeMinDigit2>
 59c:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <startingTimeMinDigit2+0x1>
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <startingTimeMinDigit2+0x1>
 5a6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <startingTimeMinDigit2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	93 ed       	ldi	r25, 0xD3	; 211
 5ae:	20 e3       	ldi	r18, 0x30	; 48
 5b0:	81 50       	subi	r24, 0x01	; 1
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	20 40       	sbci	r18, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <player1turn+0xda>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <player1turn+0xe4>
 5ba:	00 00       	nop
	player1turn();
	return;
}

void player1turn() {
	while(startingTimeMinDigit1 != 0 || startingTimeMinDigit2 != 0 || startingTimeSecDigit1 != 0 || startingTimeSecDigit2 != 0) {
 5bc:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <startingTimeMinDigit1>
 5c0:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <startingTimeMinDigit1+0x1>
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	09 f0       	breq	.+2      	; 0x5ca <player1turn+0xf4>
 5c8:	91 cf       	rjmp	.-222    	; 0x4ec <player1turn+0x16>
 5ca:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <startingTimeMinDigit2>
 5ce:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <startingTimeMinDigit2+0x1>
 5d2:	21 15       	cp	r18, r1
 5d4:	31 05       	cpc	r19, r1
 5d6:	09 f0       	breq	.+2      	; 0x5da <player1turn+0x104>
 5d8:	89 cf       	rjmp	.-238    	; 0x4ec <player1turn+0x16>
 5da:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <startingTimeSecDigit1>
 5de:	50 91 d5 01 	lds	r21, 0x01D5	; 0x8001d5 <startingTimeSecDigit1+0x1>
 5e2:	41 15       	cp	r20, r1
 5e4:	51 05       	cpc	r21, r1
 5e6:	09 f0       	breq	.+2      	; 0x5ea <player1turn+0x114>
 5e8:	81 cf       	rjmp	.-254    	; 0x4ec <player1turn+0x16>
 5ea:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <startingTimeSecDigit2>
 5ee:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <startingTimeSecDigit2+0x1>
 5f2:	61 15       	cp	r22, r1
 5f4:	71 05       	cpc	r23, r1
 5f6:	09 f0       	breq	.+2      	; 0x5fa <player1turn+0x124>
 5f8:	79 cf       	rjmp	.-270    	; 0x4ec <player1turn+0x16>
			}
		}

		_delay_ms(1000);
	}
	TM1637_setSegments((uint8_t[]) { ledNumbers[startingTimeMinDigit2], ledNumbers[startingTimeMinDigit1], ledNumbers[startingTimeSecDigit2], ledNumbers[startingTimeSecDigit1] }, 4, 0);
 5fa:	f9 01       	movw	r30, r18
 5fc:	e0 5f       	subi	r30, 0xF0	; 240
 5fe:	fe 4f       	sbci	r31, 0xFE	; 254
 600:	20 81       	ld	r18, Z
 602:	29 83       	std	Y+1, r18	; 0x01
 604:	fc 01       	movw	r30, r24
 606:	e0 5f       	subi	r30, 0xF0	; 240
 608:	fe 4f       	sbci	r31, 0xFE	; 254
 60a:	80 81       	ld	r24, Z
 60c:	8a 83       	std	Y+2, r24	; 0x02
 60e:	fb 01       	movw	r30, r22
 610:	e0 5f       	subi	r30, 0xF0	; 240
 612:	fe 4f       	sbci	r31, 0xFE	; 254
 614:	80 81       	ld	r24, Z
 616:	8b 83       	std	Y+3, r24	; 0x03
 618:	fa 01       	movw	r30, r20
 61a:	e0 5f       	subi	r30, 0xF0	; 240
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	80 81       	ld	r24, Z
 620:	8c 83       	std	Y+4, r24	; 0x04
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	64 e0       	ldi	r22, 0x04	; 4
 626:	ce 01       	movw	r24, r28
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	0e 94 69 05 	call	0xad2	; 0xad2 <TM1637_setSegments>
	PORTB |= (1 << PORTB4);
 62e:	85 b1       	in	r24, 0x05	; 5
 630:	80 61       	ori	r24, 0x10	; 16
 632:	85 b9       	out	0x05, r24	; 5
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	93 ed       	ldi	r25, 0xD3	; 211
 638:	20 e3       	ldi	r18, 0x30	; 48
 63a:	81 50       	subi	r24, 0x01	; 1
 63c:	90 40       	sbci	r25, 0x00	; 0
 63e:	20 40       	sbci	r18, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <player1turn+0x164>
 642:	00 c0       	rjmp	.+0      	; 0x644 <player1turn+0x16e>
 644:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1 << PORTB4);
 646:	85 b1       	in	r24, 0x05	; 5
 648:	8f 7e       	andi	r24, 0xEF	; 239
 64a:	85 b9       	out	0x05, r24	; 5
}
 64c:	28 96       	adiw	r28, 0x08	; 8
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	f8 94       	cli
 652:	de bf       	out	0x3e, r29	; 62
 654:	0f be       	out	0x3f, r0	; 63
 656:	cd bf       	out	0x3d, r28	; 61
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <startGame>:
		startingTimeSecDigit2 = customSecond[1];
	}
	
}

void startGame() {
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	00 d0       	rcall	.+0      	; 0x664 <startGame+0x6>
 664:	00 d0       	rcall	.+0      	; 0x666 <startGame+0x8>
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
	TM1637_init();
 66a:	0e 94 2f 04 	call	0x85e	; 0x85e <TM1637_init>
	TM1637_setSegments((uint8_t[]) { ledNumbers[startingTimeMinDigit2], ledNumbers[startingTimeMinDigit1], ledNumbers[startingTimeSecDigit2], ledNumbers[startingTimeSecDigit1] }, 4, 0);
 66e:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <startingTimeMinDigit2>
 672:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <startingTimeMinDigit2+0x1>
 676:	e0 5f       	subi	r30, 0xF0	; 240
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	80 81       	ld	r24, Z
 67c:	89 83       	std	Y+1, r24	; 0x01
 67e:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <startingTimeMinDigit1>
 682:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <startingTimeMinDigit1+0x1>
 686:	e0 5f       	subi	r30, 0xF0	; 240
 688:	fe 4f       	sbci	r31, 0xFE	; 254
 68a:	80 81       	ld	r24, Z
 68c:	8a 83       	std	Y+2, r24	; 0x02
 68e:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <startingTimeSecDigit2>
 692:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <startingTimeSecDigit2+0x1>
 696:	e0 5f       	subi	r30, 0xF0	; 240
 698:	fe 4f       	sbci	r31, 0xFE	; 254
 69a:	80 81       	ld	r24, Z
 69c:	8b 83       	std	Y+3, r24	; 0x03
 69e:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <startingTimeSecDigit1>
 6a2:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <startingTimeSecDigit1+0x1>
 6a6:	e0 5f       	subi	r30, 0xF0	; 240
 6a8:	fe 4f       	sbci	r31, 0xFE	; 254
 6aa:	80 81       	ld	r24, Z
 6ac:	8c 83       	std	Y+4, r24	; 0x04
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	64 e0       	ldi	r22, 0x04	; 4
 6b2:	ce 01       	movw	r24, r28
 6b4:	01 96       	adiw	r24, 0x01	; 1
 6b6:	0e 94 69 05 	call	0xad2	; 0xad2 <TM1637_setSegments>
	TM1637_turnOnAndSetBrightness(TM1637_MAX_BRIGHTNESS);
 6ba:	87 e0       	ldi	r24, 0x07	; 7
 6bc:	0e 94 02 05 	call	0xa04	; 0xa04 <TM1637_turnOnAndSetBrightness>
	lcd_clrscr();
 6c0:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
	lcd_puts(("set time to %d%d:%d%d\n", startingTimeMinDigit1, startingTimeMinDigit2, startingTimeSecDigit1, startingTimeSecDigit1, startingTimeSecDigit2));
 6c4:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <startingTimeSecDigit2>
 6c8:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <startingTimeSecDigit2+0x1>
 6cc:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
 6d0:	2f ef       	ldi	r18, 0xFF	; 255
 6d2:	83 ed       	ldi	r24, 0xD3	; 211
 6d4:	90 e3       	ldi	r25, 0x30	; 48
 6d6:	21 50       	subi	r18, 0x01	; 1
 6d8:	80 40       	sbci	r24, 0x00	; 0
 6da:	90 40       	sbci	r25, 0x00	; 0
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <startGame+0x78>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <startGame+0x82>
 6e0:	00 00       	nop
	_delay_ms(1000);
	lcd_clrscr();
 6e2:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
	lcd_puts("game starts in\n");
 6e6:	86 e5       	ldi	r24, 0x56	; 86
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	lcd_puts("3");
 6ee:	86 e6       	ldi	r24, 0x66	; 102
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
 6f6:	2f ef       	ldi	r18, 0xFF	; 255
 6f8:	83 ed       	ldi	r24, 0xD3	; 211
 6fa:	90 e3       	ldi	r25, 0x30	; 48
 6fc:	21 50       	subi	r18, 0x01	; 1
 6fe:	80 40       	sbci	r24, 0x00	; 0
 700:	90 40       	sbci	r25, 0x00	; 0
 702:	e1 f7       	brne	.-8      	; 0x6fc <startGame+0x9e>
 704:	00 c0       	rjmp	.+0      	; 0x706 <startGame+0xa8>
 706:	00 00       	nop
	_delay_ms(1000);
	lcd_clrscr();
 708:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
	lcd_puts("game starts in\n");
 70c:	86 e5       	ldi	r24, 0x56	; 86
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	lcd_puts("2");
 714:	88 e6       	ldi	r24, 0x68	; 104
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
 71c:	2f ef       	ldi	r18, 0xFF	; 255
 71e:	83 ed       	ldi	r24, 0xD3	; 211
 720:	90 e3       	ldi	r25, 0x30	; 48
 722:	21 50       	subi	r18, 0x01	; 1
 724:	80 40       	sbci	r24, 0x00	; 0
 726:	90 40       	sbci	r25, 0x00	; 0
 728:	e1 f7       	brne	.-8      	; 0x722 <startGame+0xc4>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <startGame+0xce>
 72c:	00 00       	nop
	_delay_ms(1000);
	lcd_clrscr();
 72e:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
	lcd_puts("game starts in\n");
 732:	86 e5       	ldi	r24, 0x56	; 86
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	lcd_puts("1");
 73a:	8a e6       	ldi	r24, 0x6A	; 106
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
 742:	2f ef       	ldi	r18, 0xFF	; 255
 744:	83 ed       	ldi	r24, 0xD3	; 211
 746:	90 e3       	ldi	r25, 0x30	; 48
 748:	21 50       	subi	r18, 0x01	; 1
 74a:	80 40       	sbci	r24, 0x00	; 0
 74c:	90 40       	sbci	r25, 0x00	; 0
 74e:	e1 f7       	brne	.-8      	; 0x748 <startGame+0xea>
 750:	00 c0       	rjmp	.+0      	; 0x752 <startGame+0xf4>
 752:	00 00       	nop
	_delay_ms(1000);
	lcd_clrscr();
 754:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
	lcd_puts("game started!!!\n");
 758:	8c e6       	ldi	r24, 0x6C	; 108
 75a:	91 e0       	ldi	r25, 0x01	; 1
 75c:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	lcd_puts("player1's turn\n");
 760:	8d e7       	ldi	r24, 0x7D	; 125
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	player1turn();
 768:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <player1turn>
	return;
}
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	0f 90       	pop	r0
 772:	0f 90       	pop	r0
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	08 95       	ret

0000077a <mainMenu>:
	mainMenu();
	
}

void mainMenu(void) {
	lcd_puts("A:3 min B:2 min\n");
 77a:	8d e8       	ldi	r24, 0x8D	; 141
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	lcd_puts("C:1 min D:custom");
 782:	8e e9       	ldi	r24, 0x9E	; 158
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
	for(;;)
	{
		uint8_t tmp = nacitajklavesy();
 78a:	0e 94 53 00 	call	0xa6	; 0xa6 <nacitajklavesy>
		char charPressed = zistiklaves(tmp);
 78e:	0e 94 86 00 	call	0x10c	; 0x10c <zistiklaves>
 792:	c8 2f       	mov	r28, r24
		
		if (isalnum(charPressed)) {
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 2e 06 	call	0xc5c	; 0xc5c <isalnum>
 79a:	89 2b       	or	r24, r25
 79c:	b1 f3       	breq	.-20     	; 0x78a <mainMenu+0x10>
			
			if (charPressed == 'A' || charPressed == 'B' || charPressed == 'C' || charPressed == 'D') {
 79e:	8f eb       	ldi	r24, 0xBF	; 191
 7a0:	8c 0f       	add	r24, r28
 7a2:	84 30       	cpi	r24, 0x04	; 4
 7a4:	90 f7       	brcc	.-28     	; 0x78a <mainMenu+0x10>
				lcd_clrscr();
 7a6:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
				if (charPressed == 'A'){
 7aa:	c1 34       	cpi	r28, 0x41	; 65
 7ac:	b9 f4       	brne	.+46     	; 0x7dc <mainMenu+0x62>
					lcd_puts("3 minutes");
 7ae:	8f ea       	ldi	r24, 0xAF	; 175
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
					startingTimeSecDigit1 = 0;
 7b6:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <startingTimeSecDigit1+0x1>
 7ba:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <startingTimeSecDigit1>
					startingTimeSecDigit2 = 0;
 7be:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <startingTimeSecDigit2+0x1>
 7c2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <startingTimeSecDigit2>
					startingTimeMinDigit1 = 0;
 7c6:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <startingTimeMinDigit1+0x1>
 7ca:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <startingTimeMinDigit1>
					startingTimeMinDigit2 = 3;
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <startingTimeMinDigit2+0x1>
 7d6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <startingTimeMinDigit2>
 7da:	d7 cf       	rjmp	.-82     	; 0x78a <mainMenu+0x10>

				}
				else if (charPressed == 'B'){
 7dc:	c2 34       	cpi	r28, 0x42	; 66
 7de:	b9 f4       	brne	.+46     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
					lcd_puts("2 minutes");
 7e0:	89 eb       	ldi	r24, 0xB9	; 185
 7e2:	91 e0       	ldi	r25, 0x01	; 1
 7e4:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
					startingTimeSecDigit1 = 0;
 7e8:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <startingTimeSecDigit1+0x1>
 7ec:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <startingTimeSecDigit1>
					startingTimeSecDigit2 = 0;
 7f0:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <startingTimeSecDigit2+0x1>
 7f4:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <startingTimeSecDigit2>
					startingTimeMinDigit1 = 0;
 7f8:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <startingTimeMinDigit1+0x1>
 7fc:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <startingTimeMinDigit1>
					startingTimeMinDigit2 = 2;
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <startingTimeMinDigit2+0x1>
 808:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <startingTimeMinDigit2>
 80c:	be cf       	rjmp	.-132    	; 0x78a <mainMenu+0x10>
				}
				else if (charPressed == 'C'){
 80e:	c3 34       	cpi	r28, 0x43	; 67
 810:	b9 f4       	brne	.+46     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
					lcd_puts("1 minutes");
 812:	83 ec       	ldi	r24, 0xC3	; 195
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_puts>
					startingTimeSecDigit1 = 0;
 81a:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <startingTimeSecDigit1+0x1>
 81e:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <startingTimeSecDigit1>
					startingTimeSecDigit2 = 0;
 822:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <startingTimeSecDigit2+0x1>
 826:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <startingTimeSecDigit2>
					startingTimeMinDigit1 = 0;
 82a:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <startingTimeMinDigit1+0x1>
 82e:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <startingTimeMinDigit1>
					startingTimeMinDigit2 = 1;
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <startingTimeMinDigit2+0x1>
 83a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <startingTimeMinDigit2>
 83e:	a5 cf       	rjmp	.-182    	; 0x78a <mainMenu+0x10>
				}
				else {
					customTime();
 840:	0e 94 95 01 	call	0x32a	; 0x32a <customTime>
					startGame();
 844:	0e 94 2f 03 	call	0x65e	; 0x65e <startGame>
 848:	a0 cf       	rjmp	.-192    	; 0x78a <mainMenu+0x10>

0000084a <main>:
int startingTimeSecDigit2;


int main(void)
{
	lcd_init(LCD_DISP_ON);
 84a:	8c e0       	ldi	r24, 0x0C	; 12
 84c:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_init>
	lcd_clrscr();
 850:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_clrscr>
	TM1637_setBrightness(0);
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	0e 94 98 04 	call	0x930	; 0x930 <TM1637_setBrightness>
	
	mainMenu();
 85a:	0e 94 bd 03 	call	0x77a	; 0x77a <mainMenu>

0000085e <TM1637_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 85e:	84 b1       	in	r24, 0x04	; 4
 860:	8e 7f       	andi	r24, 0xFE	; 254
 862:	84 b9       	out	0x04, r24	; 4
 864:	84 b1       	in	r24, 0x04	; 4
 866:	8d 7f       	andi	r24, 0xFD	; 253
 868:	84 b9       	out	0x04, r24	; 4
 86a:	85 b1       	in	r24, 0x05	; 5
 86c:	8c 7f       	andi	r24, 0xFC	; 252
 86e:	85 b9       	out	0x05, r24	; 5
 870:	84 b1       	in	r24, 0x04	; 4
 872:	81 60       	ori	r24, 0x01	; 1
 874:	84 b9       	out	0x04, r24	; 4
 876:	82 e4       	ldi	r24, 0x42	; 66
 878:	8a 95       	dec	r24
 87a:	f1 f7       	brne	.-4      	; 0x878 <TM1637_init+0x1a>
 87c:	00 c0       	rjmp	.+0      	; 0x87e <TM1637_init+0x20>
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	20 e4       	ldi	r18, 0x40	; 64
 882:	1d c0       	rjmp	.+58     	; 0x8be <TM1637_init+0x60>
 884:	84 b1       	in	r24, 0x04	; 4
 886:	82 60       	ori	r24, 0x02	; 2
 888:	84 b9       	out	0x04, r24	; 4
 88a:	81 e2       	ldi	r24, 0x21	; 33
 88c:	8a 95       	dec	r24
 88e:	f1 f7       	brne	.-4      	; 0x88c <TM1637_init+0x2e>
 890:	00 00       	nop
 892:	20 ff       	sbrs	r18, 0
 894:	04 c0       	rjmp	.+8      	; 0x89e <TM1637_init+0x40>
 896:	84 b1       	in	r24, 0x04	; 4
 898:	8e 7f       	andi	r24, 0xFE	; 254
 89a:	84 b9       	out	0x04, r24	; 4
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <TM1637_init+0x46>
 89e:	84 b1       	in	r24, 0x04	; 4
 8a0:	81 60       	ori	r24, 0x01	; 1
 8a2:	84 b9       	out	0x04, r24	; 4
 8a4:	81 e2       	ldi	r24, 0x21	; 33
 8a6:	8a 95       	dec	r24
 8a8:	f1 f7       	brne	.-4      	; 0x8a6 <TM1637_init+0x48>
 8aa:	00 00       	nop
 8ac:	84 b1       	in	r24, 0x04	; 4
 8ae:	8d 7f       	andi	r24, 0xFD	; 253
 8b0:	84 b9       	out	0x04, r24	; 4
 8b2:	82 e4       	ldi	r24, 0x42	; 66
 8b4:	8a 95       	dec	r24
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <TM1637_init+0x56>
 8b8:	00 c0       	rjmp	.+0      	; 0x8ba <TM1637_init+0x5c>
 8ba:	26 95       	lsr	r18
 8bc:	9f 5f       	subi	r25, 0xFF	; 255
 8be:	98 30       	cpi	r25, 0x08	; 8
 8c0:	08 f3       	brcs	.-62     	; 0x884 <TM1637_init+0x26>
 8c2:	84 b1       	in	r24, 0x04	; 4
 8c4:	82 60       	ori	r24, 0x02	; 2
 8c6:	84 b9       	out	0x04, r24	; 4
 8c8:	84 b1       	in	r24, 0x04	; 4
 8ca:	8e 7f       	andi	r24, 0xFE	; 254
 8cc:	84 b9       	out	0x04, r24	; 4
 8ce:	82 e4       	ldi	r24, 0x42	; 66
 8d0:	8a 95       	dec	r24
 8d2:	f1 f7       	brne	.-4      	; 0x8d0 <TM1637_init+0x72>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <TM1637_init+0x78>
 8d6:	84 b1       	in	r24, 0x04	; 4
 8d8:	8d 7f       	andi	r24, 0xFD	; 253
 8da:	84 b9       	out	0x04, r24	; 4
 8dc:	81 e2       	ldi	r24, 0x21	; 33
 8de:	8a 95       	dec	r24
 8e0:	f1 f7       	brne	.-4      	; 0x8de <TM1637_init+0x80>
 8e2:	00 00       	nop
 8e4:	18 99       	sbic	0x03, 0	; 3
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <TM1637_init+0x90>
 8e8:	84 b1       	in	r24, 0x04	; 4
 8ea:	81 60       	ori	r24, 0x01	; 1
 8ec:	84 b9       	out	0x04, r24	; 4
 8ee:	81 e2       	ldi	r24, 0x21	; 33
 8f0:	8a 95       	dec	r24
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <TM1637_init+0x92>
 8f4:	00 00       	nop
 8f6:	84 b1       	in	r24, 0x04	; 4
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	84 b9       	out	0x04, r24	; 4
 8fc:	81 e2       	ldi	r24, 0x21	; 33
 8fe:	8a 95       	dec	r24
 900:	f1 f7       	brne	.-4      	; 0x8fe <TM1637_init+0xa0>
 902:	00 00       	nop
 904:	84 b1       	in	r24, 0x04	; 4
 906:	81 60       	ori	r24, 0x01	; 1
 908:	84 b9       	out	0x04, r24	; 4
 90a:	81 e2       	ldi	r24, 0x21	; 33
 90c:	8a 95       	dec	r24
 90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xd>
 910:	00 00       	nop
 912:	84 b1       	in	r24, 0x04	; 4
 914:	8d 7f       	andi	r24, 0xFD	; 253
 916:	84 b9       	out	0x04, r24	; 4
 918:	82 e4       	ldi	r24, 0x42	; 66
 91a:	8a 95       	dec	r24
 91c:	f1 f7       	brne	.-4      	; 0x91a <__stack+0x1b>
 91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0x21>
 920:	84 b1       	in	r24, 0x04	; 4
 922:	8e 7f       	andi	r24, 0xFE	; 254
 924:	84 b9       	out	0x04, r24	; 4
 926:	82 e4       	ldi	r24, 0x42	; 66
 928:	8a 95       	dec	r24
 92a:	f1 f7       	brne	.-4      	; 0x928 <__stack+0x29>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
 92e:	08 95       	ret

00000930 <TM1637_setBrightness>:
void TM1637_turnOff(void) {
  TM1637_turnOnOff_inline(0);
}

void TM1637_setBrightness(uint8_t brightness) {
  TM1637_brightness_reg = (TM1637_brightness_reg & TM1637_MASK_ON_OFF) | (brightness & TM1637_MASK_BRIGHTNESS);
 930:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <TM1637_brightness_reg>
 934:	98 70       	andi	r25, 0x08	; 8
 936:	87 70       	andi	r24, 0x07	; 7
 938:	89 2b       	or	r24, r25
 93a:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <TM1637_brightness_reg>
  TM1637_COMM_STOP;
}

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
 93e:	84 b1       	in	r24, 0x04	; 4
 940:	81 60       	ori	r24, 0x01	; 1
 942:	84 b9       	out	0x04, r24	; 4
 944:	82 e4       	ldi	r24, 0x42	; 66
 946:	8a 95       	dec	r24
 948:	f1 f7       	brne	.-4      	; 0x946 <TM1637_setBrightness+0x16>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <TM1637_setBrightness+0x1c>
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
 94c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <TM1637_brightness_reg>
 950:	9f 70       	andi	r25, 0x0F	; 15
 952:	90 68       	ori	r25, 0x80	; 128
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 954:	20 e0       	ldi	r18, 0x00	; 0
 956:	1d c0       	rjmp	.+58     	; 0x992 <TM1637_setBrightness+0x62>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 958:	84 b1       	in	r24, 0x04	; 4
 95a:	82 60       	ori	r24, 0x02	; 2
 95c:	84 b9       	out	0x04, r24	; 4
 95e:	81 e2       	ldi	r24, 0x21	; 33
 960:	8a 95       	dec	r24
 962:	f1 f7       	brne	.-4      	; 0x960 <TM1637_setBrightness+0x30>
 964:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 966:	90 ff       	sbrs	r25, 0
 968:	04 c0       	rjmp	.+8      	; 0x972 <TM1637_setBrightness+0x42>
 96a:	84 b1       	in	r24, 0x04	; 4
 96c:	8e 7f       	andi	r24, 0xFE	; 254
 96e:	84 b9       	out	0x04, r24	; 4
 970:	03 c0       	rjmp	.+6      	; 0x978 <TM1637_setBrightness+0x48>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 972:	84 b1       	in	r24, 0x04	; 4
 974:	81 60       	ori	r24, 0x01	; 1
 976:	84 b9       	out	0x04, r24	; 4
 978:	81 e2       	ldi	r24, 0x21	; 33
 97a:	8a 95       	dec	r24
 97c:	f1 f7       	brne	.-4      	; 0x97a <TM1637_setBrightness+0x4a>
 97e:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 980:	84 b1       	in	r24, 0x04	; 4
 982:	8d 7f       	andi	r24, 0xFD	; 253
 984:	84 b9       	out	0x04, r24	; 4
 986:	82 e4       	ldi	r24, 0x42	; 66
 988:	8a 95       	dec	r24
 98a:	f1 f7       	brne	.-4      	; 0x988 <TM1637_setBrightness+0x58>
 98c:	00 c0       	rjmp	.+0      	; 0x98e <TM1637_setBrightness+0x5e>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 98e:	96 95       	lsr	r25
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 990:	2f 5f       	subi	r18, 0xFF	; 255
 992:	28 30       	cpi	r18, 0x08	; 8
 994:	08 f3       	brcs	.-62     	; 0x958 <TM1637_setBrightness+0x28>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 996:	84 b1       	in	r24, 0x04	; 4
 998:	82 60       	ori	r24, 0x02	; 2
 99a:	84 b9       	out	0x04, r24	; 4
  TM1637_SET_DIO_HIGH_AND_INPUT;
 99c:	84 b1       	in	r24, 0x04	; 4
 99e:	8e 7f       	andi	r24, 0xFE	; 254
 9a0:	84 b9       	out	0x04, r24	; 4
 9a2:	82 e4       	ldi	r24, 0x42	; 66
 9a4:	8a 95       	dec	r24
 9a6:	f1 f7       	brne	.-4      	; 0x9a4 <TM1637_setBrightness+0x74>
 9a8:	00 c0       	rjmp	.+0      	; 0x9aa <TM1637_setBrightness+0x7a>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 9aa:	84 b1       	in	r24, 0x04	; 4
 9ac:	8d 7f       	andi	r24, 0xFD	; 253
 9ae:	84 b9       	out	0x04, r24	; 4
 9b0:	81 e2       	ldi	r24, 0x21	; 33
 9b2:	8a 95       	dec	r24
 9b4:	f1 f7       	brne	.-4      	; 0x9b2 <TM1637_setBrightness+0x82>
 9b6:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 9b8:	18 99       	sbic	0x03, 0	; 3
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <TM1637_setBrightness+0x92>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 9bc:	84 b1       	in	r24, 0x04	; 4
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	84 b9       	out	0x04, r24	; 4
 9c2:	81 e2       	ldi	r24, 0x21	; 33
 9c4:	8a 95       	dec	r24
 9c6:	f1 f7       	brne	.-4      	; 0x9c4 <TM1637_setBrightness+0x94>
 9c8:	00 00       	nop

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
  TM1637_COMM_STOP;
 9ca:	84 b1       	in	r24, 0x04	; 4
 9cc:	82 60       	ori	r24, 0x02	; 2
 9ce:	84 b9       	out	0x04, r24	; 4
 9d0:	81 e2       	ldi	r24, 0x21	; 33
 9d2:	8a 95       	dec	r24
 9d4:	f1 f7       	brne	.-4      	; 0x9d2 <TM1637_setBrightness+0xa2>
 9d6:	00 00       	nop
 9d8:	84 b1       	in	r24, 0x04	; 4
 9da:	81 60       	ori	r24, 0x01	; 1
 9dc:	84 b9       	out	0x04, r24	; 4
 9de:	81 e2       	ldi	r24, 0x21	; 33
 9e0:	8a 95       	dec	r24
 9e2:	f1 f7       	brne	.-4      	; 0x9e0 <TM1637_setBrightness+0xb0>
 9e4:	00 00       	nop
 9e6:	84 b1       	in	r24, 0x04	; 4
 9e8:	8d 7f       	andi	r24, 0xFD	; 253
 9ea:	84 b9       	out	0x04, r24	; 4
 9ec:	82 e4       	ldi	r24, 0x42	; 66
 9ee:	8a 95       	dec	r24
 9f0:	f1 f7       	brne	.-4      	; 0x9ee <TM1637_setBrightness+0xbe>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <TM1637_setBrightness+0xc4>
 9f4:	84 b1       	in	r24, 0x04	; 4
 9f6:	8e 7f       	andi	r24, 0xFE	; 254
 9f8:	84 b9       	out	0x04, r24	; 4
 9fa:	82 e4       	ldi	r24, 0x42	; 66
 9fc:	8a 95       	dec	r24
 9fe:	f1 f7       	brne	.-4      	; 0x9fc <TM1637_setBrightness+0xcc>
 a00:	00 c0       	rjmp	.+0      	; 0xa02 <TM1637_setBrightness+0xd2>
 a02:	08 95       	ret

00000a04 <TM1637_turnOnAndSetBrightness>:
  TM1637_brightness_reg = (TM1637_brightness_reg & TM1637_MASK_ON_OFF) | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
 a04:	87 70       	andi	r24, 0x07	; 7
 a06:	88 60       	ori	r24, 0x08	; 8
 a08:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <TM1637_brightness_reg>
  TM1637_COMM_STOP;
}

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
 a0c:	84 b1       	in	r24, 0x04	; 4
 a0e:	81 60       	ori	r24, 0x01	; 1
 a10:	84 b9       	out	0x04, r24	; 4
 a12:	82 e4       	ldi	r24, 0x42	; 66
 a14:	8a 95       	dec	r24
 a16:	f1 f7       	brne	.-4      	; 0xa14 <TM1637_turnOnAndSetBrightness+0x10>
 a18:	00 c0       	rjmp	.+0      	; 0xa1a <TM1637_turnOnAndSetBrightness+0x16>
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
 a1a:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <TM1637_brightness_reg>
 a1e:	9f 70       	andi	r25, 0x0F	; 15
 a20:	90 68       	ori	r25, 0x80	; 128
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 a22:	20 e0       	ldi	r18, 0x00	; 0
 a24:	1d c0       	rjmp	.+58     	; 0xa60 <TM1637_turnOnAndSetBrightness+0x5c>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 a26:	84 b1       	in	r24, 0x04	; 4
 a28:	82 60       	ori	r24, 0x02	; 2
 a2a:	84 b9       	out	0x04, r24	; 4
 a2c:	81 e2       	ldi	r24, 0x21	; 33
 a2e:	8a 95       	dec	r24
 a30:	f1 f7       	brne	.-4      	; 0xa2e <TM1637_turnOnAndSetBrightness+0x2a>
 a32:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 a34:	90 ff       	sbrs	r25, 0
 a36:	04 c0       	rjmp	.+8      	; 0xa40 <TM1637_turnOnAndSetBrightness+0x3c>
 a38:	84 b1       	in	r24, 0x04	; 4
 a3a:	8e 7f       	andi	r24, 0xFE	; 254
 a3c:	84 b9       	out	0x04, r24	; 4
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <TM1637_turnOnAndSetBrightness+0x42>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 a40:	84 b1       	in	r24, 0x04	; 4
 a42:	81 60       	ori	r24, 0x01	; 1
 a44:	84 b9       	out	0x04, r24	; 4
 a46:	81 e2       	ldi	r24, 0x21	; 33
 a48:	8a 95       	dec	r24
 a4a:	f1 f7       	brne	.-4      	; 0xa48 <TM1637_turnOnAndSetBrightness+0x44>
 a4c:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 a4e:	84 b1       	in	r24, 0x04	; 4
 a50:	8d 7f       	andi	r24, 0xFD	; 253
 a52:	84 b9       	out	0x04, r24	; 4
 a54:	82 e4       	ldi	r24, 0x42	; 66
 a56:	8a 95       	dec	r24
 a58:	f1 f7       	brne	.-4      	; 0xa56 <TM1637_turnOnAndSetBrightness+0x52>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <TM1637_turnOnAndSetBrightness+0x58>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 a5c:	96 95       	lsr	r25
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 a5e:	2f 5f       	subi	r18, 0xFF	; 255
 a60:	28 30       	cpi	r18, 0x08	; 8
 a62:	08 f3       	brcs	.-62     	; 0xa26 <TM1637_turnOnAndSetBrightness+0x22>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 a64:	84 b1       	in	r24, 0x04	; 4
 a66:	82 60       	ori	r24, 0x02	; 2
 a68:	84 b9       	out	0x04, r24	; 4
  TM1637_SET_DIO_HIGH_AND_INPUT;
 a6a:	84 b1       	in	r24, 0x04	; 4
 a6c:	8e 7f       	andi	r24, 0xFE	; 254
 a6e:	84 b9       	out	0x04, r24	; 4
 a70:	82 e4       	ldi	r24, 0x42	; 66
 a72:	8a 95       	dec	r24
 a74:	f1 f7       	brne	.-4      	; 0xa72 <TM1637_turnOnAndSetBrightness+0x6e>
 a76:	00 c0       	rjmp	.+0      	; 0xa78 <TM1637_turnOnAndSetBrightness+0x74>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 a78:	84 b1       	in	r24, 0x04	; 4
 a7a:	8d 7f       	andi	r24, 0xFD	; 253
 a7c:	84 b9       	out	0x04, r24	; 4
 a7e:	81 e2       	ldi	r24, 0x21	; 33
 a80:	8a 95       	dec	r24
 a82:	f1 f7       	brne	.-4      	; 0xa80 <TM1637_turnOnAndSetBrightness+0x7c>
 a84:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 a86:	18 99       	sbic	0x03, 0	; 3
 a88:	03 c0       	rjmp	.+6      	; 0xa90 <TM1637_turnOnAndSetBrightness+0x8c>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 a8a:	84 b1       	in	r24, 0x04	; 4
 a8c:	81 60       	ori	r24, 0x01	; 1
 a8e:	84 b9       	out	0x04, r24	; 4
 a90:	81 e2       	ldi	r24, 0x21	; 33
 a92:	8a 95       	dec	r24
 a94:	f1 f7       	brne	.-4      	; 0xa92 <TM1637_turnOnAndSetBrightness+0x8e>
 a96:	00 00       	nop

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
  TM1637_COMM_STOP;
 a98:	84 b1       	in	r24, 0x04	; 4
 a9a:	82 60       	ori	r24, 0x02	; 2
 a9c:	84 b9       	out	0x04, r24	; 4
 a9e:	81 e2       	ldi	r24, 0x21	; 33
 aa0:	8a 95       	dec	r24
 aa2:	f1 f7       	brne	.-4      	; 0xaa0 <TM1637_turnOnAndSetBrightness+0x9c>
 aa4:	00 00       	nop
 aa6:	84 b1       	in	r24, 0x04	; 4
 aa8:	81 60       	ori	r24, 0x01	; 1
 aaa:	84 b9       	out	0x04, r24	; 4
 aac:	81 e2       	ldi	r24, 0x21	; 33
 aae:	8a 95       	dec	r24
 ab0:	f1 f7       	brne	.-4      	; 0xaae <TM1637_turnOnAndSetBrightness+0xaa>
 ab2:	00 00       	nop
 ab4:	84 b1       	in	r24, 0x04	; 4
 ab6:	8d 7f       	andi	r24, 0xFD	; 253
 ab8:	84 b9       	out	0x04, r24	; 4
 aba:	82 e4       	ldi	r24, 0x42	; 66
 abc:	8a 95       	dec	r24
 abe:	f1 f7       	brne	.-4      	; 0xabc <TM1637_turnOnAndSetBrightness+0xb8>
 ac0:	00 c0       	rjmp	.+0      	; 0xac2 <TM1637_turnOnAndSetBrightness+0xbe>
 ac2:	84 b1       	in	r24, 0x04	; 4
 ac4:	8e 7f       	andi	r24, 0xFE	; 254
 ac6:	84 b9       	out	0x04, r24	; 4
 ac8:	82 e4       	ldi	r24, 0x42	; 66
 aca:	8a 95       	dec	r24
 acc:	f1 f7       	brne	.-4      	; 0xaca <TM1637_turnOnAndSetBrightness+0xc6>
 ace:	00 c0       	rjmp	.+0      	; 0xad0 <TM1637_turnOnAndSetBrightness+0xcc>
 ad0:	08 95       	ret

00000ad2 <TM1637_setSegments>:
void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
 ad2:	fc 01       	movw	r30, r24
  TM1637_COMM_START;
 ad4:	84 b1       	in	r24, 0x04	; 4
 ad6:	81 60       	ori	r24, 0x01	; 1
 ad8:	84 b9       	out	0x04, r24	; 4
 ada:	82 e4       	ldi	r24, 0x42	; 66
 adc:	8a 95       	dec	r24
 ade:	f1 f7       	brne	.-4      	; 0xadc <TM1637_setSegments+0xa>
 ae0:	00 c0       	rjmp	.+0      	; 0xae2 <TM1637_setSegments+0x10>
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
 ae2:	43 70       	andi	r20, 0x03	; 3
 ae4:	40 6c       	ori	r20, 0xC0	; 192
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	1d c0       	rjmp	.+58     	; 0xb24 <TM1637_setSegments+0x52>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 aea:	84 b1       	in	r24, 0x04	; 4
 aec:	82 60       	ori	r24, 0x02	; 2
 aee:	84 b9       	out	0x04, r24	; 4
 af0:	81 e2       	ldi	r24, 0x21	; 33
 af2:	8a 95       	dec	r24
 af4:	f1 f7       	brne	.-4      	; 0xaf2 <TM1637_setSegments+0x20>
 af6:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 af8:	40 ff       	sbrs	r20, 0
 afa:	04 c0       	rjmp	.+8      	; 0xb04 <TM1637_setSegments+0x32>
 afc:	84 b1       	in	r24, 0x04	; 4
 afe:	8e 7f       	andi	r24, 0xFE	; 254
 b00:	84 b9       	out	0x04, r24	; 4
 b02:	03 c0       	rjmp	.+6      	; 0xb0a <TM1637_setSegments+0x38>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 b04:	84 b1       	in	r24, 0x04	; 4
 b06:	81 60       	ori	r24, 0x01	; 1
 b08:	84 b9       	out	0x04, r24	; 4
 b0a:	81 e2       	ldi	r24, 0x21	; 33
 b0c:	8a 95       	dec	r24
 b0e:	f1 f7       	brne	.-4      	; 0xb0c <TM1637_setSegments+0x3a>
 b10:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 b12:	84 b1       	in	r24, 0x04	; 4
 b14:	8d 7f       	andi	r24, 0xFD	; 253
 b16:	84 b9       	out	0x04, r24	; 4
 b18:	82 e4       	ldi	r24, 0x42	; 66
 b1a:	8a 95       	dec	r24
 b1c:	f1 f7       	brne	.-4      	; 0xb1a <TM1637_setSegments+0x48>
 b1e:	00 c0       	rjmp	.+0      	; 0xb20 <TM1637_setSegments+0x4e>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 b20:	46 95       	lsr	r20
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 b22:	9f 5f       	subi	r25, 0xFF	; 255
 b24:	98 30       	cpi	r25, 0x08	; 8
 b26:	08 f3       	brcs	.-62     	; 0xaea <TM1637_setSegments+0x18>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 b28:	84 b1       	in	r24, 0x04	; 4
 b2a:	82 60       	ori	r24, 0x02	; 2
 b2c:	84 b9       	out	0x04, r24	; 4
  TM1637_SET_DIO_HIGH_AND_INPUT;
 b2e:	84 b1       	in	r24, 0x04	; 4
 b30:	8e 7f       	andi	r24, 0xFE	; 254
 b32:	84 b9       	out	0x04, r24	; 4
 b34:	82 e4       	ldi	r24, 0x42	; 66
 b36:	8a 95       	dec	r24
 b38:	f1 f7       	brne	.-4      	; 0xb36 <TM1637_setSegments+0x64>
 b3a:	00 c0       	rjmp	.+0      	; 0xb3c <TM1637_setSegments+0x6a>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 b3c:	84 b1       	in	r24, 0x04	; 4
 b3e:	8d 7f       	andi	r24, 0xFD	; 253
 b40:	84 b9       	out	0x04, r24	; 4
 b42:	81 e2       	ldi	r24, 0x21	; 33
 b44:	8a 95       	dec	r24
 b46:	f1 f7       	brne	.-4      	; 0xb44 <TM1637_setSegments+0x72>
 b48:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 b4a:	18 99       	sbic	0x03, 0	; 3
 b4c:	03 c0       	rjmp	.+6      	; 0xb54 <TM1637_setSegments+0x82>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 b4e:	84 b1       	in	r24, 0x04	; 4
 b50:	81 60       	ori	r24, 0x01	; 1
 b52:	84 b9       	out	0x04, r24	; 4
 b54:	81 e2       	ldi	r24, 0x21	; 33
 b56:	8a 95       	dec	r24
 b58:	f1 f7       	brne	.-4      	; 0xb56 <TM1637_setSegments+0x84>
 b5a:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 b5c:	40 e0       	ldi	r20, 0x00	; 0
 b5e:	40 c0       	rjmp	.+128    	; 0xbe0 <TM1637_setSegments+0x10e>
    TM1637_writeByte(segments[i]);
 b60:	df 01       	movw	r26, r30
 b62:	a4 0f       	add	r26, r20
 b64:	b1 1d       	adc	r27, r1
 b66:	3c 91       	ld	r19, X
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 b68:	20 e0       	ldi	r18, 0x00	; 0
 b6a:	1d c0       	rjmp	.+58     	; 0xba6 <TM1637_setSegments+0xd4>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 b6c:	94 b1       	in	r25, 0x04	; 4
 b6e:	92 60       	ori	r25, 0x02	; 2
 b70:	94 b9       	out	0x04, r25	; 4
 b72:	81 e2       	ldi	r24, 0x21	; 33
 b74:	8a 95       	dec	r24
 b76:	f1 f7       	brne	.-4      	; 0xb74 <TM1637_setSegments+0xa2>
 b78:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 b7a:	30 ff       	sbrs	r19, 0
 b7c:	04 c0       	rjmp	.+8      	; 0xb86 <TM1637_setSegments+0xb4>
 b7e:	94 b1       	in	r25, 0x04	; 4
 b80:	9e 7f       	andi	r25, 0xFE	; 254
 b82:	94 b9       	out	0x04, r25	; 4
 b84:	03 c0       	rjmp	.+6      	; 0xb8c <TM1637_setSegments+0xba>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 b86:	94 b1       	in	r25, 0x04	; 4
 b88:	91 60       	ori	r25, 0x01	; 1
 b8a:	94 b9       	out	0x04, r25	; 4
 b8c:	81 e2       	ldi	r24, 0x21	; 33
 b8e:	8a 95       	dec	r24
 b90:	f1 f7       	brne	.-4      	; 0xb8e <TM1637_setSegments+0xbc>
 b92:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 b94:	94 b1       	in	r25, 0x04	; 4
 b96:	9d 7f       	andi	r25, 0xFD	; 253
 b98:	94 b9       	out	0x04, r25	; 4
 b9a:	82 e4       	ldi	r24, 0x42	; 66
 b9c:	8a 95       	dec	r24
 b9e:	f1 f7       	brne	.-4      	; 0xb9c <TM1637_setSegments+0xca>
 ba0:	00 c0       	rjmp	.+0      	; 0xba2 <TM1637_setSegments+0xd0>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 ba2:	36 95       	lsr	r19
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 ba4:	2f 5f       	subi	r18, 0xFF	; 255
 ba6:	28 30       	cpi	r18, 0x08	; 8
 ba8:	08 f3       	brcs	.-62     	; 0xb6c <TM1637_setSegments+0x9a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 baa:	84 b1       	in	r24, 0x04	; 4
 bac:	82 60       	ori	r24, 0x02	; 2
 bae:	84 b9       	out	0x04, r24	; 4
  TM1637_SET_DIO_HIGH_AND_INPUT;
 bb0:	84 b1       	in	r24, 0x04	; 4
 bb2:	8e 7f       	andi	r24, 0xFE	; 254
 bb4:	84 b9       	out	0x04, r24	; 4
 bb6:	82 e4       	ldi	r24, 0x42	; 66
 bb8:	8a 95       	dec	r24
 bba:	f1 f7       	brne	.-4      	; 0xbb8 <TM1637_setSegments+0xe6>
 bbc:	00 c0       	rjmp	.+0      	; 0xbbe <TM1637_setSegments+0xec>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 bbe:	94 b1       	in	r25, 0x04	; 4
 bc0:	9d 7f       	andi	r25, 0xFD	; 253
 bc2:	94 b9       	out	0x04, r25	; 4
 bc4:	81 e2       	ldi	r24, 0x21	; 33
 bc6:	8a 95       	dec	r24
 bc8:	f1 f7       	brne	.-4      	; 0xbc6 <TM1637_setSegments+0xf4>
 bca:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 bcc:	18 99       	sbic	0x03, 0	; 3
 bce:	03 c0       	rjmp	.+6      	; 0xbd6 <TM1637_setSegments+0x104>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 bd0:	84 b1       	in	r24, 0x04	; 4
 bd2:	81 60       	ori	r24, 0x01	; 1
 bd4:	84 b9       	out	0x04, r24	; 4
 bd6:	81 e2       	ldi	r24, 0x21	; 33
 bd8:	8a 95       	dec	r24
 bda:	f1 f7       	brne	.-4      	; 0xbd8 <TM1637_setSegments+0x106>
 bdc:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 bde:	4f 5f       	subi	r20, 0xFF	; 255
 be0:	46 17       	cp	r20, r22
 be2:	08 f4       	brcc	.+2      	; 0xbe6 <TM1637_setSegments+0x114>
 be4:	bd cf       	rjmp	.-134    	; 0xb60 <TM1637_setSegments+0x8e>
    TM1637_writeByte(segments[i]);
  TM1637_COMM_STOP;
 be6:	84 b1       	in	r24, 0x04	; 4
 be8:	82 60       	ori	r24, 0x02	; 2
 bea:	84 b9       	out	0x04, r24	; 4
 bec:	81 e2       	ldi	r24, 0x21	; 33
 bee:	8a 95       	dec	r24
 bf0:	f1 f7       	brne	.-4      	; 0xbee <TM1637_setSegments+0x11c>
 bf2:	00 00       	nop
 bf4:	84 b1       	in	r24, 0x04	; 4
 bf6:	81 60       	ori	r24, 0x01	; 1
 bf8:	84 b9       	out	0x04, r24	; 4
 bfa:	81 e2       	ldi	r24, 0x21	; 33
 bfc:	8a 95       	dec	r24
 bfe:	f1 f7       	brne	.-4      	; 0xbfc <TM1637_setSegments+0x12a>
 c00:	00 00       	nop
 c02:	84 b1       	in	r24, 0x04	; 4
 c04:	8d 7f       	andi	r24, 0xFD	; 253
 c06:	84 b9       	out	0x04, r24	; 4
 c08:	82 e4       	ldi	r24, 0x42	; 66
 c0a:	8a 95       	dec	r24
 c0c:	f1 f7       	brne	.-4      	; 0xc0a <TM1637_setSegments+0x138>
 c0e:	00 c0       	rjmp	.+0      	; 0xc10 <TM1637_setSegments+0x13e>
 c10:	84 b1       	in	r24, 0x04	; 4
 c12:	8e 7f       	andi	r24, 0xFE	; 254
 c14:	84 b9       	out	0x04, r24	; 4
 c16:	82 e4       	ldi	r24, 0x42	; 66
 c18:	8a 95       	dec	r24
 c1a:	f1 f7       	brne	.-4      	; 0xc18 <TM1637_setSegments+0x146>
 c1c:	00 c0       	rjmp	.+0      	; 0xc1e <TM1637_setSegments+0x14c>
 c1e:	08 95       	ret

00000c20 <atoi>:
 c20:	fc 01       	movw	r30, r24
 c22:	88 27       	eor	r24, r24
 c24:	99 27       	eor	r25, r25
 c26:	e8 94       	clt
 c28:	21 91       	ld	r18, Z+
 c2a:	20 32       	cpi	r18, 0x20	; 32
 c2c:	e9 f3       	breq	.-6      	; 0xc28 <atoi+0x8>
 c2e:	29 30       	cpi	r18, 0x09	; 9
 c30:	10 f0       	brcs	.+4      	; 0xc36 <atoi+0x16>
 c32:	2e 30       	cpi	r18, 0x0E	; 14
 c34:	c8 f3       	brcs	.-14     	; 0xc28 <atoi+0x8>
 c36:	2b 32       	cpi	r18, 0x2B	; 43
 c38:	41 f0       	breq	.+16     	; 0xc4a <atoi+0x2a>
 c3a:	2d 32       	cpi	r18, 0x2D	; 45
 c3c:	39 f4       	brne	.+14     	; 0xc4c <atoi+0x2c>
 c3e:	68 94       	set
 c40:	04 c0       	rjmp	.+8      	; 0xc4a <atoi+0x2a>
 c42:	0e 94 46 06 	call	0xc8c	; 0xc8c <__mulhi_const_10>
 c46:	82 0f       	add	r24, r18
 c48:	91 1d       	adc	r25, r1
 c4a:	21 91       	ld	r18, Z+
 c4c:	20 53       	subi	r18, 0x30	; 48
 c4e:	2a 30       	cpi	r18, 0x0A	; 10
 c50:	c0 f3       	brcs	.-16     	; 0xc42 <atoi+0x22>
 c52:	1e f4       	brtc	.+6      	; 0xc5a <atoi+0x3a>
 c54:	90 95       	com	r25
 c56:	81 95       	neg	r24
 c58:	9f 4f       	sbci	r25, 0xFF	; 255
 c5a:	08 95       	ret

00000c5c <isalnum>:
 c5c:	91 11       	cpse	r25, r1
 c5e:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__ctype_isfalse>
 c62:	80 53       	subi	r24, 0x30	; 48
 c64:	8a 50       	subi	r24, 0x0A	; 10
 c66:	18 f0       	brcs	.+6      	; 0xc6e <isalnum+0x12>
 c68:	86 5c       	subi	r24, 0xC6	; 198
 c6a:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <isalpha>
 c6e:	08 95       	ret

00000c70 <__ctype_isfalse>:
 c70:	99 27       	eor	r25, r25
 c72:	88 27       	eor	r24, r24

00000c74 <__ctype_istrue>:
 c74:	08 95       	ret

00000c76 <isupper>:
 c76:	85 fd       	sbrc	r24, 5
 c78:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__ctype_isfalse>

00000c7c <isalpha>:
 c7c:	80 62       	ori	r24, 0x20	; 32

00000c7e <islower>:
 c7e:	91 11       	cpse	r25, r1
 c80:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__ctype_isfalse>
 c84:	81 56       	subi	r24, 0x61	; 97
 c86:	8a 51       	subi	r24, 0x1A	; 26
 c88:	d8 f7       	brcc	.-10     	; 0xc80 <islower+0x2>
 c8a:	08 95       	ret

00000c8c <__mulhi_const_10>:
 c8c:	7a e0       	ldi	r23, 0x0A	; 10
 c8e:	97 9f       	mul	r25, r23
 c90:	90 2d       	mov	r25, r0
 c92:	87 9f       	mul	r24, r23
 c94:	80 2d       	mov	r24, r0
 c96:	91 0d       	add	r25, r1
 c98:	11 24       	eor	r1, r1
 c9a:	08 95       	ret

00000c9c <_exit>:
 c9c:	f8 94       	cli

00000c9e <__stop_program>:
 c9e:	ff cf       	rjmp	.-2      	; 0xc9e <__stop_program>
